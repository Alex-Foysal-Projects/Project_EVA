import React, { useState, useRef, useEffect } from 'react';
import { Mic, Send, MoreVertical, Paperclip, Smile, Calendar, Settings, Bell, ChevronRight, X, ChevronLeft } from 'lucide-react';

const ResizableSplitScreen = () => {
  const [messages, setMessages] = useState([
    { id: 1, type: 'bot', text: "Hello! I'm Eva, your executive virtual assistant. How can I help you today?" },
    { id: 2, type: 'user', text: "hi" },
    { id: 3, type: 'bot', text: "Hi there! I'm Eva, your executive assistant. How can I help you today?" },
    { id: 4, type: 'user', text: "Aren't you supposed to know?" },
    { id: 5, type: 'bot', text: "I'm here to help organize your schedule and priorities. Let me know if you want to see your calendar or if there's anything else I can assist you with!" }
  ]);
  
  const [inputValue, setInputValue] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [splitPosition, setSplitPosition] = useState(40); // Default split at 40% for chat
  const [isResizing, setIsResizing] = useState(false);
  const [showCalendar, setShowCalendar] = useState(true);
  const [showProfileMenu, setShowProfileMenu] = useState(false);
  
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);
  const splitPanelRef = useRef(null);

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  // Close profile menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showProfileMenu && !event.target.closest('.profile-menu-container')) {
        setShowProfileMenu(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [showProfileMenu]);

  const handleSend = () => {
    if (inputValue.trim()) {
      setMessages([...messages, { id: messages.length + 1, type: 'user', text: inputValue }]);
      setInputValue('');
      
      // Simulate bot response after a short delay
      setTimeout(() => {
        let responseText = "I'll help you with that right away.";
        
        if (inputValue.toLowerCase().includes('calendar') || 
            inputValue.toLowerCase().includes('schedule') ||
            inputValue.toLowerCase().includes('meeting')) {
          responseText = "I've updated your calendar based on your request. You can see the changes in the calendar view.";
          if (!showCalendar) {
            setShowCalendar(true);
          }
        }
        
        setMessages(prev => [...prev, { 
          id: prev.length + 1, 
          type: 'bot', 
          text: responseText
        }]);
      }, 1000);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const toggleRecording = () => {
    if (isRecording) {
      setIsRecording(false);
      // If we were recording and canceled, don't send anything
    } else {
      // Start recording
      setIsRecording(true);
      setRecordingTime(0);
      const interval = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
      
      // Auto-detect and stop after short period
      setTimeout(() => {
        setInputValue("Can you show me my calendar for this week?");
        setIsRecording(false);
        clearInterval(interval);
      }, 3000);
      
      return () => clearInterval(interval);
    }
  };

  const formatTime = (seconds) => {
    return `${Math.floor(seconds / 60)}:${String(seconds % 60).padStart(2, '0')}`;
  };

  const startResize = (e) => {
    e.preventDefault();
    setIsResizing(true);
    document.addEventListener('mousemove', handleResize);
    document.addEventListener('mouseup', stopResize);
  };

  const handleResize = (e) => {
    if (!isResizing || !splitPanelRef.current) return;
    
    const containerRect = splitPanelRef.current.getBoundingClientRect();
    const newPosition = ((e.clientX - containerRect.left) / containerRect.width) * 100;
    
    // Allow sliding to either edge (with small buffer for usability)
    if (newPosition >= 5 && newPosition <= 95) {
      setSplitPosition(newPosition);
    }
  };

  const stopResize = () => {
    setIsResizing(false);
    document.removeEventListener('mousemove', handleResize);
    document.removeEventListener('mouseup', stopResize);
  };

  const toggleCalendarView = () => {
    setShowCalendar(!showCalendar);
    if (!showCalendar) {
      // If we're showing the calendar again, use the previous position or default
      setSplitPosition(40); 
    } else {
      // If we're hiding the calendar, expand chat to full width
      setSplitPosition(100);
    }
  };
  
  // Button to quickly snap to different layouts
  const snapToLayout = (layout) => {
    switch(layout) {
      case 'chat':
        setSplitPosition(95);
        break;
      case 'calendar':
        setSplitPosition(5);
        break;
      case 'balanced':
        setSplitPosition(40);
        break;
      default:
        break;
    }
  };

  // Calendar data for visualization
  const calendarEvents = [
    { id: 1, title: 'Movie Night', day: 'Thu', start: '9:00', end: '10:00', color: 'bg-pink-500' },
    { id: 2, title: 'Team Meeting', day: 'Fri', start: '11:30', end: '13:00', color: 'bg-blue-400' },
    { id: 3, title: 'Project Review', day: 'Fri', start: '14:00', end: '15:00', color: 'bg-cyan-400' },
    { id: 4, title: 'Park Visit', day: 'Sun', start: '9:00', end: '11:30', color: 'bg-pink-500' },
    { id: 5, title: 'Game Night', day: 'Wed', start: '11:00', end: '12:30', color: 'bg-pink-500' },
    { id: 6, title: 'Yoga Class', day: 'Wed', start: '12:30', end: '14:00', color: 'bg-purple-500' },
    { id: 7, title: 'Study Time', day: 'Wed', start: '12:30', end: '13:30', color: 'bg-purple-500' },
    { id: 8, title: 'Movie Night', day: 'Wed', start: '13:30', end: '15:00', color: 'bg-pink-500' },
    { id: 9, title: '1:1 with Manager', day: 'Thu', start: '11:30', end: '12:30', color: 'bg-blue-400' },
    { id: 10, title: '1:1 with Manager', day: 'Thu', start: '13:30', end: '15:30', color: 'bg-blue-400' },
    { id: 11, title: 'Park Visit', day: 'Mon', start: '14:30', end: '16:30', color: 'bg-pink-500' },
    { id: 12, title: 'Project Review', day: 'Mon', start: '16:30', end: '17:30', color: 'bg-cyan-400' },
    { id: 13, title: 'Dinner', day: 'Tue', start: '18:00', end: '19:30', color: 'bg-cyan-400' },
    { id: 14, title: 'Project Review', day: 'Tue', start: '15:30', end: '17:00', color: 'bg-cyan-400' },
    { id: 15, title: 'Deep Work Session', day: 'Tue', start: '16:30', end: '17:30', color: 'bg-cyan-400' },
    { id: 16, title: 'Team Meeting', day: 'Wed', start: '15:30', end: '17:30', color: 'bg-blue-400' },
    { id: 17, title: 'Reading', day: 'Thu', start: '16:00', end: '17:00', color: 'bg-purple-500' },
    { id: 18, title: 'Team Meeting', day: 'Fri', start: '16:30', end: '17:30', color: 'bg-blue-400' },
    { id: 19, title: 'Study Time', day: 'Fri', start: '15:00', end: '16:00', color: 'bg-purple-500' },
    { id: 20, title: 'Team Meeting', day: 'Fri', start: '17:00', end: '18:00', color: 'bg-blue-400' },
    { id: 21, title: 'Yoga Class', day: 'Sun', start: '15:00', end: '16:00', color: 'bg-purple-500' },
    { id: 22, title: 'Game Night', day: 'Sun', start: '14:30', end: '16:00', color: 'bg-pink-500' },
    { id: 23, title: 'Study Time', day: 'Sun', start: '13:00', end: '14:00', color: 'bg-purple-500' }
  ];

  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
  const dayNumbers = [24, 25, 26, 27, 28, 29, 30];
  const hours = Array.from({ length: 13 }, (_, i) => i + 8); // 8:00 to 20:00 (8am to 8pm)

  return (
    <div className="flex flex-col h-screen bg-gray-50 text-gray-800">
      {/* Header */}
      <div className="flex items-center px-4 py-3 bg-gray-900 text-white">
        <div className="flex items-center">
          <div className="w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-sm mr-2">
            E
          </div>
          <div className="font-bold">Eva</div>
        </div>
        
        <div className="flex items-center mx-auto">
          <button className="flex items-center text-cyan-400 font-medium">
            <Calendar className="w-5 h-5 mr-2" />
            Calendar
          </button>
        </div>
        
        <div className="flex items-center space-x-4">
          <button className="relative">
            <Bell className="w-5 h-5 text-gray-300" />
            <span className="absolute top-0 right-0 w-2 h-2 bg-cyan-400 rounded-full"></span>
          </button>
          <div className="relative profile-menu-container">
            <button 
              className="focus:outline-none"
              onClick={() => setShowProfileMenu(!showProfileMenu)}
            >
              <div className="w-8 h-8 bg-gray-700 rounded-full"></div>
            </button>
            
            {/* Profile dropdown menu */}
            {showProfileMenu && (
              <div className="absolute right-0 top-full mt-2 bg-white rounded-md shadow-lg py-1 w-48 z-20">
                <div className="px-4 py-2 border-b border-gray-100">
                  <div className="font-medium">User Name</div>
                  <div className="text-sm text-gray-500">user@example.com</div>
                </div>
                <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                  <Settings className="w-4 h-4 mr-2" />
                  Settings
                </button>
                <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                  Help & Support
                </button>
                <div className="border-t border-gray-100 mt-1"></div>
                <button className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                  Sign Out
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Main content - Split panel */}
      <div 
        className="flex-1 flex overflow-hidden" 
        ref={splitPanelRef}
        style={{ cursor: isResizing ? 'col-resize' : 'auto' }}
      >
        {/* Left panel - Chat */}
        <div 
          className={`flex flex-col bg-white transition-all duration-300 ${splitPosition < 5 ? 'opacity-50' : 'opacity-100'}`}
          style={{ width: `${splitPosition}%`, minWidth: '50px' }}
        >
          <div className="px-4 py-3 border-b border-gray-200">
            <h1 className="text-xl font-bold">Eva Assistant</h1>
          </div>
          
          <div className="flex-1 flex flex-col overflow-hidden p-4">
            <div className="flex items-center mb-3">
              <div className="w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-sm mr-2">
                E
              </div>
              <div className="font-bold">Eva Assistant</div>
            </div>
            
            {/* Messages area */}
            <div className="flex-1 overflow-y-auto mb-4">
              {messages.map((message) => (
                <div 
                  key={message.id} 
                  className={`mb-4 ${message.type === 'user' ? 'flex justify-end' : 'flex justify-start'}`}
                >
                  {message.type === 'bot' && (
                    <div className="bg-purple-100 rounded-2xl p-4 shadow-sm max-w-xs mr-auto">
                      {message.text}
                    </div>
                  )}
                  
                  {message.type === 'user' && (
                    <div className="bg-cyan-400 text-white rounded-2xl p-3 shadow-sm max-w-xs ml-auto">
                      {message.text}
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            
            {/* Input area */}
            <div className="mt-auto">
              {isRecording ? (
                <div className="flex items-center justify-between bg-gray-100 rounded-full p-2 mb-2">
                  <div className="flex items-center">
                    <div className="w-2 h-2 rounded-full bg-red-500 mr-2 animate-pulse"></div>
                    <div className="text-gray-700">Listening... {formatTime(recordingTime)}</div>
                  </div>
                  <div className="flex items-center">
                    <button 
                      className="text-gray-500 text-sm px-3 py-1 hover:bg-gray-200 rounded-full transition-colors"
                      onClick={toggleRecording}
                    >
                      Cancel
                    </button>
                    <button 
                      className="text-white text-sm px-3 py-1 bg-blue-500 rounded-full ml-2 hover:bg-blue-600 transition-colors"
                    >
                      Done
                    </button>
                  </div>
                </div>
              ) : (
                <div className="flex items-center bg-gray-100 rounded-full p-1">
                  <div className="relative">
                    <button className="p-2 transition-all hover:text-blue-500">
                      <Smile className="w-5 h-5 text-gray-500" />
                    </button>
                  </div>
                  <input
                    ref={inputRef}
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Ask Eva anything..."
                    className="flex-1 bg-transparent outline-none px-2"
                  />
                  <div className="flex">
                    <button className="p-2 transition-all hover:text-blue-500">
                      <Paperclip className="w-5 h-5 text-gray-500" />
                    </button>
                    <button 
                      className={`p-2 ml-1 rounded-full flex items-center justify-center transition-all ${
                        isRecording 
                          ? "bg-red-500" 
                          : inputValue 
                            ? "bg-cyan-500" 
                            : "bg-cyan-500"
                      }`}
                      onClick={inputValue ? handleSend : toggleRecording}
                    >
                      {isRecording ? (
                        <div className="w-3 h-3 rounded-full bg-white animate-pulse"></div>
                      ) : inputValue ? (
                        <Send className="w-5 h-5 text-white" />
                      ) : (
                        <Mic className="w-5 h-5 text-white" />
                      )}
                    </button>
                  </div>
                </div>
              )}
              <div className="flex space-x-2 mt-2">
                <button 
                  className="text-xs px-2 py-1 rounded bg-gray-200 hover:bg-gray-300 transition-colors"
                  onClick={() => snapToLayout('chat')}
                  title="Focus on chat"
                >
                  Chat
                </button>
                <button 
                  className="text-xs px-2 py-1 rounded bg-gray-200 hover:bg-gray-300 transition-colors"
                  onClick={() => snapToLayout('balanced')}
                  title="Balance both panels"
                >
                  50/50
                </button>
                <button 
                  className="text-xs px-2 py-1 rounded bg-gray-200 hover:bg-gray-300 transition-colors"
                  onClick={() => snapToLayout('calendar')}
                  title="Focus on calendar"
                >
                  Calendar
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Resizer */}
        <div 
          className="w-1 bg-gray-200 hover:bg-cyan-400 cursor-col-resize flex-shrink-0 relative z-10"
          onMouseDown={startResize}
          onDoubleClick={() => snapToLayout(splitPosition < 50 ? 'chat' : 'calendar')}
        >
          {/* Toggle button */}
          <button 
            className="absolute top-1/2 -translate-y-1/2 -right-3 w-6 h-16 bg-gray-200 hover:bg-gray-300 rounded-r-md flex items-center justify-center"
            onClick={toggleCalendarView}
          >
            {showCalendar ? 
              (splitPosition < 50 ? <ChevronRight className="w-4 h-4" /> : <ChevronLeft className="w-4 h-4" />) : 
              <ChevronRight className="w-4 h-4" />
            }
          </button>
        </div>
        
        {/* Right panel - Calendar (conditionally rendered) */}
        {showCalendar && (
          <div 
            className={`bg-white transition-all duration-300 ${splitPosition > 95 ? 'opacity-50' : 'opacity-100'}`}
            style={{ width: `${100 - splitPosition}%`, minWidth: '50px' }}
          >
            <div className="flex justify-between items-center px-4 py-3 border-b border-gray-200">
              <h2 className="text-xl font-bold">Your Calendar</h2>
              <button 
                className="flex items-center text-gray-500 hover:text-gray-700"
                onClick={toggleCalendarView}
              >
                <X className="w-5 h-5 mr-1" />
                Hide Calendar
              </button>
            </div>
            
            <div className="overflow-auto h-full p-2">
              <div className="grid grid-cols-8 border border-gray-200 min-w-max">
                {/* Time column */}
                <div className="border-r border-gray-200">
                  <div className="h-12 border-b border-gray-200"></div>
                  {hours.map(hour => (
                    <div key={hour} className="h-12 border-b border-gray-200 px-2 text-right text-xs text-gray-500">
                      {hour}:00
                    </div>
                  ))}
                </div>
                
                {/* Day columns */}
                {days.map((day, idx) => (
                  <div key={day} className="border-r border-gray-200">
                    <div className="text-center py-3 border-b border-gray-200">
                      <div className="font-medium">{day}</div>
                      <div className="text-sm text-gray-500">{dayNumbers[idx]}</div>
                    </div>
                    
                    {/* Time slots */}
                    <div className="relative h-full">
                      {hours.map(hour => (
                        <div key={hour} className="h-12 border-b border-gray-200"></div>
                      ))}
                      
                      {/* Events */}
                      {calendarEvents
                        .filter(event => event.day === day)
                        .map(event => {
                          // Calculate position and height using 24-hour format
                          const startHour = parseInt(event.start.split(':')[0]);
                          const startMinute = parseInt(event.start.split(':')[1] || 0);
                          const endHour = parseInt(event.end.split(':')[0]);
                          const endMinute = parseInt(event.end.split(':')[1] || 0);
                          
                          // Format display time (convert from 24h to 12h format for display)
                          const formatTimeDisplay = (hour, minute) => {
                            const h = hour > 12 ? hour - 12 : hour;
                            const ampm = hour >= 12 ? 'PM' : 'AM';
                            return `${h}:${minute.toString().padStart(2, '0')} ${ampm}`;
                          };
                          
                          // Each hour slot is 48px tall
                          // Calculate position relative to the first time slot (8:00)
                          const hourOffset = startHour - 8; // Our calendar starts at 8:00
                          const minuteOffset = startMinute / 60;
                          const top = (hourOffset + minuteOffset) * 48;
                          
                          // Calculate event height based on duration
                          const durationHours = endHour - startHour;
                          const durationMinutes = (endMinute - startMinute) / 60;
                          const height = (durationHours + durationMinutes) * 48;
                          
                          return (
                            <div 
                              key={event.id}
                              className={`absolute w-11/12 left-1/2 -translate-x-1/2 rounded-md p-1 text-white text-xs overflow-hidden ${event.color}`}
                              style={{ 
                                top: `${top}px`,
                                height: `${height}px`,
                                zIndex: 10
                              }}
                            >
                              <div className="font-medium">{event.title}</div>
                              <div className="text-xs opacity-90">{event.start} - {event.end}</div>
                            </div>
                          );
                        })}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResizableSplitScreen;
